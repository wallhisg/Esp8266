#======================================================================
# 	base directory of the ESP8266 SDK package, absolute
SDK_BASE		= /home/wall/projects/IoT/mcu/platforms/espressif/esp8266_sdk/2.2.1/ESP8266_NONOS_SDK_2.2.1
XTENSA_TOOLS_ROOT 	= /home/wall/projects/IoT/mcu/platforms/espressif/esp8266_sdk/2.2.1/xtensa-lx106-elf/bin

SDK_INCS	+= $(foreach sdir, $(SDK_INCDIR), $(SDK_BASE)/$(sdir)/*.h)
MAP		:= 'esptool.py --spi-flash-size-map'
#======================================================================
# 	various paths from the SDK used in this project
SDK_LIBDIR	= lib
SDK_LDDIR	= ld
SDK_INCDIR	:= include include/json

#======================================================================
#	no user configurable options below here

SDK_LIBDIR	:= $(addprefix $(SDK_BASE)/,$(SDK_LIBDIR))
SDK_INCDIR	:= $(addprefix -I$(SDK_BASE)/,$(SDK_INCDIR))

#======================================================================
# 	libraries used in this project, mainly provided by the SDK
#LIBS		:= c gcc hal pp phy net80211 lwip wpa pwm upgrade main ssl 
LIBS		:= c gcc hal pp phy net80211 lwip wpa pwm upgrade main ssl crypto smartconfig espnow json airkiss
LIBS		:= $(addprefix -l,$(LIBS))

#======================================================================
# 	compiler flags using during compilation of source files
CFLAGS 		+= $(SDK_INCDIR)
CFLAGS		+= -Os -g -O2 -Wundef -Werror -Wl,-EL -nostdlib -mlongcalls -mtext-section-literals  
CFLAGS		+= -D__ets__ -DICACHE_FLASH 
CFLAGS		+= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static 
CFLAGS		+= -ffunction-sections -fdata-sections -fno-builtin-printf 

#CFLAGS		+= -Os -g -O2 -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals  -D__ets__ -DICACHE_FLASH -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static -ffunction-sections -fdata-sections -fno-builtin-printf -Wno-pointer-arith

CFLAGS		+= $(addprefix -I,$(PROJECT_BASE))
#======================================================================
# add edk and root dirs into CFLAGS
CFLAGS		+= $(addprefix -I,$(EDK_BASE))
CFLAGS		+= $(addprefix -I,$(ROOT_BASE))

#======================================================================
LDFLAGS		= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static

#======================================================================
# 	linker flags used to generate the main object file
# 	linker script used for the above linkier step
LD_SCRIPT	= -T$(SDK_BASE)/ld/eagle.app.v6.ld

FW_FILE_1_ADDR	:= 0x00000
FW_FILE_2_ADDR	:= 0x10000
#======================================================================
# 	base directory for the compiler
# 	select which tools to use as compiler, librarian and linker

CC		:= $(XTENSA_TOOLS_ROOT)/xtensa-lx106-elf-gcc
AR		:= $(XTENSA_TOOLS_ROOT)/xtensa-lx106-elf-ar
LD		:= $(XTENSA_TOOLS_ROOT)/xtensa-lx106-elf-gcc

#======================================================================
# 	we create two different files for uploading into the flash
# 	these are the names and options to generate them
FW_FILE_1	:= $(addprefix $(FIRM_BASE)/,$(FW_FILE_1_ADDR).bin)
FW_FILE_2	:= $(addprefix $(FIRM_BASE)/,$(FW_FILE_2_ADDR).bin)

#======================================================================
# 	esptool.py path and port
ESPTOOL		?= esptool.py
ESPPORT		?= /dev/ttyUSB0
BAUDRATE	:= 115200
#BAUDRATE	:= 480600
FLASH_FREQ	:= 40m
FLASH_MODE	:= dio

#======================================================================
V ?= $(VERBOSE)
ifeq ("$(V)","1")
Q :=
vecho := @true
else
Q := @
vecho := echo
endif

BIN::= ~/projects/IoT/mcu/esp/esp8266/bin
#======================================================================
all: config checkdirs build $(LIBS_AR) $(OUTS) $(FW_FILE_1) $(FW_FILE_2)

build: $(EDK_OBJS) $(PROJECT_OBJS) 

flash: $(FW_FILE_1) $(FW_FILE_2)
	$(ESPTOOL) --port $(ESPPORT) \
	--baud $(BAUDRATE) \
	write_flash --flash_freq $(FLASH_FREQ) --flash_mode $(FLASH_MODE) --flash_size $(FLASH_SIZE)  \
	$(FW_FILE_1_ADDR) $(FW_FILE_1) $(FW_FILE_2_ADDR) $(FW_FILE_2) \
	0x3fc000 $(SDK_BASE)/bin/esp_init_data_default_v05.bin
#	$(ESPTOOL) --port $(ESPPORT) erase_flash

clean:
	$(Q) rm -rf $(FIRM_BASE) $(BUILD_BASE) $(PROJECT_OBJS) $(EDK_OBJS) $(PROJECT_DEPS)

checkdirs: $(BUILD_DIR) $(FIRM_BASE)

$(BUILD_DIR):
	$(Q) mkdir -p $@
	
$(FIRM_BASE):
	$(Q) mkdir -p $@

#======================================================================
# Output file
# Create final output files
#======================================================================	
$(LIBS_AR): $(EDK_OBJS) $(PROJECT_OBJS)
#	$(vecho) "AR $@"
	$(AR) cru $@ $^

$(OUTS): $(LIBS_AR)
#	$(vecho) "LD $@"
	$(LD) -L$(SDK_LIBDIR) $(LD_SCRIPT) $(LDFLAGS) -Wl,--start-group $(LIBS) $(LIBS_AR) -Wl,--end-group -o $@
	
$(FIRM_BASE)/%.bin: $(OUTS) | $(FIRM_BASE)
#	$(vecho) "FW $(FIRM_BASE)/"
	$(ESPTOOL) elf2image --flash_mode dio --flash_freq '40m' --flash_size $(FLASH_SIZE) -o $(FIRM_BASE)/ $(OUTS)

